// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"mygo/app/userCenter/user-rpc/pb/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChargeReq       = pb.ChargeReq
	ChargeResp      = pb.ChargeResp
	GetCodeReq      = pb.GetCodeReq
	GetCodeResp     = pb.GetCodeResp
	GetUserInfoReq  = pb.GetUserInfoReq
	GetUserInfoResp = pb.GetUserInfoResp
	LoginReq        = pb.LoginReq
	LoginResp       = pb.LoginResp
	RegisterReq     = pb.RegisterReq
	RegisterResp    = pb.RegisterResp
	SpendReq        = pb.SpendReq
	SpendResp       = pb.SpendResp

	UserService interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetCode(ctx context.Context, in *GetCodeReq, opts ...grpc.CallOption) (*GetCodeResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		Charge(ctx context.Context, in *ChargeReq, opts ...grpc.CallOption) (*ChargeResp, error)
		Spend(ctx context.Context, in *SpendReq, opts ...grpc.CallOption) (*SpendResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) GetCode(ctx context.Context, in *GetCodeReq, opts ...grpc.CallOption) (*GetCodeResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.GetCode(ctx, in, opts...)
}

func (m *defaultUserService) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUserService) Charge(ctx context.Context, in *ChargeReq, opts ...grpc.CallOption) (*ChargeResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.Charge(ctx, in, opts...)
}

func (m *defaultUserService) Spend(ctx context.Context, in *SpendReq, opts ...grpc.CallOption) (*SpendResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.Spend(ctx, in, opts...)
}
