// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	zeroUserFieldNames          = builder.RawFieldNames(&ZeroUser{})
	zeroUserRows                = strings.Join(zeroUserFieldNames, ",")
	zeroUserRowsExpectAutoSet   = strings.Join(stringx.Remove(zeroUserFieldNames, "`userId`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	zeroUserRowsWithPlaceHolder = strings.Join(stringx.Remove(zeroUserFieldNames, "`userId`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheZeroUserUserIdPrefix   = "cache:zeroUser:userId:"
	cacheZeroUserUsernamePrefix = "cache:zeroUser:username:"
)

type (
	zeroUserModel interface {
		Insert(ctx context.Context, data *ZeroUser) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*ZeroUser, error)
		FindOneByUsername(ctx context.Context, username string) (*ZeroUser, error)
		Update(ctx context.Context, data *ZeroUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultZeroUserModel struct {
		sqlc.CachedConn
		table string
	}

	ZeroUser struct {
		Username string `db:"username"`
		Mobile   string `db:"mobile"`
		Password string `db:"password"`
		UserId   int64  `db:"userId"`
		Money    int64  `db:"money"`
	}
)

func newZeroUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultZeroUserModel {
	return &defaultZeroUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`zeroUser`",
	}
}

func (m *defaultZeroUserModel) Delete(ctx context.Context, userId int64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	zeroUserUserIdKey := fmt.Sprintf("%s%v", cacheZeroUserUserIdPrefix, userId)
	zeroUserUsernameKey := fmt.Sprintf("%s%v", cacheZeroUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `userId` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, zeroUserUserIdKey, zeroUserUsernameKey)
	return err
}

func (m *defaultZeroUserModel) FindOne(ctx context.Context, userId int64) (*ZeroUser, error) {
	zeroUserUserIdKey := fmt.Sprintf("%s%v", cacheZeroUserUserIdPrefix, userId)
	var resp ZeroUser
	err := m.QueryRowCtx(ctx, &resp, zeroUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `userId` = ? limit 1", zeroUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultZeroUserModel) FindOneByUsername(ctx context.Context, username string) (*ZeroUser, error) {
	zeroUserUsernameKey := fmt.Sprintf("%s%v", cacheZeroUserUsernamePrefix, username)
	var resp ZeroUser
	err := m.QueryRowIndexCtx(ctx, &resp, zeroUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", zeroUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultZeroUserModel) Insert(ctx context.Context, data *ZeroUser) (sql.Result, error) {
	zeroUserUserIdKey := fmt.Sprintf("%s%v", cacheZeroUserUserIdPrefix, data.UserId)
	zeroUserUsernameKey := fmt.Sprintf("%s%v", cacheZeroUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, zeroUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Mobile, data.Password, data.Money)
	}, zeroUserUserIdKey, zeroUserUsernameKey)
	return ret, err
}

func (m *defaultZeroUserModel) Update(ctx context.Context, newData *ZeroUser) error {
	data, err := m.FindOne(ctx, newData.UserId)
	if err != nil {
		return err
	}

	zeroUserUserIdKey := fmt.Sprintf("%s%v", cacheZeroUserUserIdPrefix, data.UserId)
	zeroUserUsernameKey := fmt.Sprintf("%s%v", cacheZeroUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `userId` = ?", m.table, zeroUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Mobile, newData.Password, newData.Money, newData.UserId)
	}, zeroUserUserIdKey, zeroUserUsernameKey)
	return err
}

func (m *defaultZeroUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheZeroUserUserIdPrefix, primary)
}

func (m *defaultZeroUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `userId` = ? limit 1", zeroUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultZeroUserModel) tableName() string {
	return m.table
}
