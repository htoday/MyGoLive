// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: talk.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TalkRoomService_CreatRoom_FullMethodName   = "/pb.TalkRoomService/CreatRoom"
	TalkRoomService_SendGift_FullMethodName    = "/pb.TalkRoomService/SendGift"
	TalkRoomService_StartRaffle_FullMethodName = "/pb.TalkRoomService/StartRaffle"
	TalkRoomService_JoinRaffle_FullMethodName  = "/pb.TalkRoomService/JoinRaffle"
)

// TalkRoomServiceClient is the client API for TalkRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkRoomServiceClient interface {
	CreatRoom(ctx context.Context, in *CreatRoomReq, opts ...grpc.CallOption) (*CreatRoomResp, error)
	SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error)
	StartRaffle(ctx context.Context, in *StartRaffleReq, opts ...grpc.CallOption) (*StartRaffleResp, error)
	JoinRaffle(ctx context.Context, in *JoinRaffleReq, opts ...grpc.CallOption) (*JoinRaffleResp, error)
}

type talkRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkRoomServiceClient(cc grpc.ClientConnInterface) TalkRoomServiceClient {
	return &talkRoomServiceClient{cc}
}

func (c *talkRoomServiceClient) CreatRoom(ctx context.Context, in *CreatRoomReq, opts ...grpc.CallOption) (*CreatRoomResp, error) {
	out := new(CreatRoomResp)
	err := c.cc.Invoke(ctx, TalkRoomService_CreatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRoomServiceClient) SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error) {
	out := new(SendGiftResp)
	err := c.cc.Invoke(ctx, TalkRoomService_SendGift_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRoomServiceClient) StartRaffle(ctx context.Context, in *StartRaffleReq, opts ...grpc.CallOption) (*StartRaffleResp, error) {
	out := new(StartRaffleResp)
	err := c.cc.Invoke(ctx, TalkRoomService_StartRaffle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRoomServiceClient) JoinRaffle(ctx context.Context, in *JoinRaffleReq, opts ...grpc.CallOption) (*JoinRaffleResp, error) {
	out := new(JoinRaffleResp)
	err := c.cc.Invoke(ctx, TalkRoomService_JoinRaffle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkRoomServiceServer is the server API for TalkRoomService service.
// All implementations must embed UnimplementedTalkRoomServiceServer
// for forward compatibility
type TalkRoomServiceServer interface {
	CreatRoom(context.Context, *CreatRoomReq) (*CreatRoomResp, error)
	SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error)
	StartRaffle(context.Context, *StartRaffleReq) (*StartRaffleResp, error)
	JoinRaffle(context.Context, *JoinRaffleReq) (*JoinRaffleResp, error)
	mustEmbedUnimplementedTalkRoomServiceServer()
}

// UnimplementedTalkRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTalkRoomServiceServer struct {
}

func (UnimplementedTalkRoomServiceServer) CreatRoom(context.Context, *CreatRoomReq) (*CreatRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatRoom not implemented")
}
func (UnimplementedTalkRoomServiceServer) SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGift not implemented")
}
func (UnimplementedTalkRoomServiceServer) StartRaffle(context.Context, *StartRaffleReq) (*StartRaffleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRaffle not implemented")
}
func (UnimplementedTalkRoomServiceServer) JoinRaffle(context.Context, *JoinRaffleReq) (*JoinRaffleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRaffle not implemented")
}
func (UnimplementedTalkRoomServiceServer) mustEmbedUnimplementedTalkRoomServiceServer() {}

// UnsafeTalkRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkRoomServiceServer will
// result in compilation errors.
type UnsafeTalkRoomServiceServer interface {
	mustEmbedUnimplementedTalkRoomServiceServer()
}

func RegisterTalkRoomServiceServer(s grpc.ServiceRegistrar, srv TalkRoomServiceServer) {
	s.RegisterService(&TalkRoomService_ServiceDesc, srv)
}

func _TalkRoomService_CreatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRoomServiceServer).CreatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRoomService_CreatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRoomServiceServer).CreatRoom(ctx, req.(*CreatRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRoomService_SendGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGiftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRoomServiceServer).SendGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRoomService_SendGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRoomServiceServer).SendGift(ctx, req.(*SendGiftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRoomService_StartRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRaffleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRoomServiceServer).StartRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRoomService_StartRaffle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRoomServiceServer).StartRaffle(ctx, req.(*StartRaffleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRoomService_JoinRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRaffleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRoomServiceServer).JoinRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkRoomService_JoinRaffle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRoomServiceServer).JoinRaffle(ctx, req.(*JoinRaffleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TalkRoomService_ServiceDesc is the grpc.ServiceDesc for TalkRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalkRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TalkRoomService",
	HandlerType: (*TalkRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatRoom",
			Handler:    _TalkRoomService_CreatRoom_Handler,
		},
		{
			MethodName: "SendGift",
			Handler:    _TalkRoomService_SendGift_Handler,
		},
		{
			MethodName: "StartRaffle",
			Handler:    _TalkRoomService_StartRaffle_Handler,
		},
		{
			MethodName: "JoinRaffle",
			Handler:    _TalkRoomService_JoinRaffle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "talk.proto",
}
