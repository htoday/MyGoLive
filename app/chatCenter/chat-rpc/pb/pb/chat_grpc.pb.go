// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatRoomService_CreatRoom_FullMethodName   = "/pb.ChatRoomService/CreatRoom"
	ChatRoomService_SendGift_FullMethodName    = "/pb.ChatRoomService/SendGift"
	ChatRoomService_StartRaffle_FullMethodName = "/pb.ChatRoomService/StartRaffle"
	ChatRoomService_JoinRaffle_FullMethodName  = "/pb.ChatRoomService/JoinRaffle"
)

// ChatRoomServiceClient is the client API for ChatRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomServiceClient interface {
	CreatRoom(ctx context.Context, in *CreatRoomReq, opts ...grpc.CallOption) (*CreatRoomResp, error)
	SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error)
	StartRaffle(ctx context.Context, in *StartRaffleReq, opts ...grpc.CallOption) (*StartRaffleResp, error)
	JoinRaffle(ctx context.Context, in *JoinRaffleReq, opts ...grpc.CallOption) (*JoinRaffleResp, error)
}

type chatRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomServiceClient(cc grpc.ClientConnInterface) ChatRoomServiceClient {
	return &chatRoomServiceClient{cc}
}

func (c *chatRoomServiceClient) CreatRoom(ctx context.Context, in *CreatRoomReq, opts ...grpc.CallOption) (*CreatRoomResp, error) {
	out := new(CreatRoomResp)
	err := c.cc.Invoke(ctx, ChatRoomService_CreatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomServiceClient) SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error) {
	out := new(SendGiftResp)
	err := c.cc.Invoke(ctx, ChatRoomService_SendGift_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomServiceClient) StartRaffle(ctx context.Context, in *StartRaffleReq, opts ...grpc.CallOption) (*StartRaffleResp, error) {
	out := new(StartRaffleResp)
	err := c.cc.Invoke(ctx, ChatRoomService_StartRaffle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomServiceClient) JoinRaffle(ctx context.Context, in *JoinRaffleReq, opts ...grpc.CallOption) (*JoinRaffleResp, error) {
	out := new(JoinRaffleResp)
	err := c.cc.Invoke(ctx, ChatRoomService_JoinRaffle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomServiceServer is the server API for ChatRoomService service.
// All implementations must embed UnimplementedChatRoomServiceServer
// for forward compatibility
type ChatRoomServiceServer interface {
	CreatRoom(context.Context, *CreatRoomReq) (*CreatRoomResp, error)
	SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error)
	StartRaffle(context.Context, *StartRaffleReq) (*StartRaffleResp, error)
	JoinRaffle(context.Context, *JoinRaffleReq) (*JoinRaffleResp, error)
	mustEmbedUnimplementedChatRoomServiceServer()
}

// UnimplementedChatRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomServiceServer struct {
}

func (UnimplementedChatRoomServiceServer) CreatRoom(context.Context, *CreatRoomReq) (*CreatRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatRoom not implemented")
}
func (UnimplementedChatRoomServiceServer) SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGift not implemented")
}
func (UnimplementedChatRoomServiceServer) StartRaffle(context.Context, *StartRaffleReq) (*StartRaffleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRaffle not implemented")
}
func (UnimplementedChatRoomServiceServer) JoinRaffle(context.Context, *JoinRaffleReq) (*JoinRaffleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRaffle not implemented")
}
func (UnimplementedChatRoomServiceServer) mustEmbedUnimplementedChatRoomServiceServer() {}

// UnsafeChatRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomServiceServer will
// result in compilation errors.
type UnsafeChatRoomServiceServer interface {
	mustEmbedUnimplementedChatRoomServiceServer()
}

func RegisterChatRoomServiceServer(s grpc.ServiceRegistrar, srv ChatRoomServiceServer) {
	s.RegisterService(&ChatRoomService_ServiceDesc, srv)
}

func _ChatRoomService_CreatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServiceServer).CreatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRoomService_CreatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServiceServer).CreatRoom(ctx, req.(*CreatRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomService_SendGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGiftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServiceServer).SendGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRoomService_SendGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServiceServer).SendGift(ctx, req.(*SendGiftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomService_StartRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRaffleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServiceServer).StartRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRoomService_StartRaffle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServiceServer).StartRaffle(ctx, req.(*StartRaffleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoomService_JoinRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRaffleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServiceServer).JoinRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRoomService_JoinRaffle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServiceServer).JoinRaffle(ctx, req.(*JoinRaffleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoomService_ServiceDesc is the grpc.ServiceDesc for ChatRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChatRoomService",
	HandlerType: (*ChatRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatRoom",
			Handler:    _ChatRoomService_CreatRoom_Handler,
		},
		{
			MethodName: "SendGift",
			Handler:    _ChatRoomService_SendGift_Handler,
		},
		{
			MethodName: "StartRaffle",
			Handler:    _ChatRoomService_StartRaffle_Handler,
		},
		{
			MethodName: "JoinRaffle",
			Handler:    _ChatRoomService_JoinRaffle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
